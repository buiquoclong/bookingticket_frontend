import React, { useState, useEffect, useCallback } from "react";
import "../../../Assets/scss/Clients/ConfirmAccount.scss";
import { useLocation, useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import LoadingBackdrop from "../../ComponentParts/LoadingBackdrop";
import { sendRequest } from "../../../Utils/apiHelper";
import {
  GET_USER_BY_ID,
  CONFIRM_ACCOUNT,
  CHANGE_CONFIRM_CODE,
} from "../../../Utils/apiUrls";

const ConfirmAccount = () => {
  const [confirmCode, setConfirmCode] = useState("");
  const [confirmCodeErrorMessage, setConfirmCodeErrorMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const [data, setData] = useState([]);
  const navigate = useNavigate();
  const location = useLocation();
  const { userId } = location.state || {};
  const fetchUserInfo = useCallback(async () => {
    if (!userId) return;

    try {
      const response = await sendRequest(GET_USER_BY_ID(userId), "GET");
      if (response) {
        setData(response);
      }
    } catch (error) {
      console.error("Error fetching user info:", error);
    }
  }, [userId]); // ‚úÖ useCallback ch·ªâ thay ƒë·ªïi khi userId thay ƒë·ªïi

  useEffect(() => {
    fetchUserInfo();
  }, [fetchUserInfo]);

  const handleConfirmAccount = async (event) => {
    event.preventDefault();

    // üß© Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!confirmCode?.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p m√£ x√°c nh·∫≠n");
      return;
    }

    if (confirmCodeErrorMessage) {
      toast.error(confirmCodeErrorMessage);
      return;
    }

    try {
      setIsLoading(true);

      // üì® G·ªçi API x√°c nh·∫≠n t√†i kho·∫£n
      const response = await sendRequest(CONFIRM_ACCOUNT(), "POST", {
        userId,
        token: confirmCode.trim(),
      });

      // üßæ X·ª≠ l√Ω ph·∫£n h·ªìi
      const message =
        typeof response === "string"
          ? response
          : response?.message || "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ m√°y ch·ªß";

      if (message.toLowerCase().includes("kh√¥ng h·ª£p l·ªá")) {
        toast.error("‚ùå M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
        return;
      }

      if (message.toLowerCase().includes("th√†nh c√¥ng")) {
        toast.success("‚úÖ X√°c th·ª±c t√†i kho·∫£n th√†nh c√¥ng üéâ");
        setTimeout(() => navigate("/login"), 2000);
        return;
      }

      // N·∫øu c√≥ th√¥ng ƒëi·ªáp kh√°c (v√≠ d·ª• l·ªói h·ªá th·ªëng)
      toast.warning(message);
    } catch (error) {
      console.error("Error confirming account:", error);
      toast.error(
        "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi x√°c th·ª±c t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau."
      );
    } finally {
      setIsLoading(false);
    }
  };

  const changeConfirmCode = async (event) => {
    event.preventDefault();

    try {
      setIsLoading(true);

      // üì® G·ª≠i y√™u c·∫ßu xin m√£ x√°c th·ª±c m·ªõi
      const response = await sendRequest(CHANGE_CONFIRM_CODE(), "POST", {
        userId,
      });

      // üßæ X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ backend
      const message =
        typeof response === "string"
          ? response
          : response?.message || "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ m√°y ch·ªß";

      if (message.toUpperCase() === "FAIL") {
        toast.error("‚ùå L·ªói khi g·ª≠i m√£ x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i!");
        return;
      }

      if (message.toLowerCase().includes("th√†nh c√¥ng")) {
        toast.success("‚úÖ M√£ x√°c th·ª±c m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n");
        setTimeout(fetchUserInfo, 1000);
        return;
      }

      // N·∫øu backend tr·∫£ v·ªÅ th√¥ng ƒëi·ªáp kh√°c
      toast.warning(message);
    } catch (error) {
      console.error("Error while sending confirm code:", error);
      toast.error("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau!");
    } finally {
      setIsLoading(false);
    }
  };

  const handleConfirmCodeChange = (event) => {
    const value = event.target.value.trim();
    setConfirmCode(value);
    setConfirmCodeErrorMessage(value ? "" : "M√£ x√°c nh·∫≠n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
  };

  return (
    <section className="verify-section container">
      <LoadingBackdrop open={isLoading} message="ƒêang x·ª≠ l√Ω y√™u c·∫ßu..." />
      <div className="verify-wrapper">
        <div className="verify-header">
          <h3 data-aos="fade-right" className="verify-title">
            X√ÅC TH·ª∞C T√ÄI KHO·∫¢N
          </h3>

          {data && (
            <p className="verify-description">
              Ch√∫ng t√¥i ƒë√£ g·ª≠i m√£ x√°c nh·∫≠n v√†o email:{" "}
              <strong>{data.email}</strong> m√† b·∫°n ƒë√£ ƒëƒÉng k√Ω. Vui l√≤ng nh·∫≠p m√£
              x√°c nh·∫≠n ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n.
            </p>
          )}
        </div>

        <form className="verify-form">
          <div className="form-group">
            <div className="input-field">
              <input
                type="text"
                className="form-input"
                placeholder=" "
                value={confirmCode}
                onChange={handleConfirmCodeChange}
              />
              <label className="form-label">Nh·∫≠p m√£ x√°c nh·∫≠n</label>
            </div>

            {confirmCodeErrorMessage && (
              <p className="error-message">{confirmCodeErrorMessage}</p>
            )}
          </div>

          <div className="button-group">
            <button className="btn btn-outline" onClick={changeConfirmCode}>
              G·ª≠i l·∫°i m√£ x√°c nh·∫≠n
            </button>
            <button className="btn btn-primary" onClick={handleConfirmAccount}>
              X√°c nh·∫≠n
            </button>
          </div>
        </form>
      </div>
    </section>
  );
};
export default ConfirmAccount;
