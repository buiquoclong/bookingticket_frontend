import React, { useState } from "react";
import "../../../Assets/scss/Clients/Register.scss";
import { Link, useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import PasswordInput from "../../ComponentParts/PasswordInput";
import { validateFields, sendRequest } from "../../../Utils/apiHelper";
import LoadingBackdrop from "../../ComponentParts/LoadingBackdrop";
import { REGISTER, USER_GOOGLE_LOGIN } from "../../../Utils/apiUrls";

const Register = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);

  const [form, setForm] = useState({
    email: "",
    userName: "",
    password: "",
    rePassword: "",
  });

  const [errors, setErrors] = useState({
    email: "",
    userName: "",
    password: "",
    rePassword: "",
  });

  const [showPassword, setShowPassword] = useState(false);
  const [showRePassword, setShowRePassword] = useState(false);

  const togglePasswordVisibility = () => setShowPassword((prev) => !prev);
  const toggleRePasswordVisibility = () => setShowRePassword((prev) => !prev);

  const validateEmail = (email) => {
    const pattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return pattern.test(email) ? "" : "Email kh√¥ng h·ª£p l·ªá.";
  };

  const validatePassword = (password) => {
    if (!password) return "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u";
    if (
      password.length < 8 ||
      password.length > 32 ||
      !/[a-zA-Z]/.test(password) ||
      !/[0-9]/.test(password)
    )
      return "M·∫≠t kh·∫©u ph·∫£i d√†i t·ª´ 8 ƒë·∫øn 32 k√Ω t·ª±, bao g·ªìm ch·ªØ v√† s·ªë";
    return "";
  };

  const validateUserName = (name) => {
    return name.trim() === "" ? "T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" : "";
  };

  const handleChange = (e) => {
    const { name, value } = e.target;

    setForm((prev) => ({ ...prev, [name]: value }));

    let errorMessage = "";
    switch (name) {
      case "email":
        errorMessage = validateEmail(value);
        break;
      case "userName":
        errorMessage = validateUserName(value);
        break;
      case "password":
        errorMessage = validatePassword(value);
        break;
      case "rePassword":
        errorMessage =
          value !== form.password ? "M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp" : "";
        break;
      default:
        break;
    }

    setErrors((prev) => ({ ...prev, [name]: errorMessage }));
  };

  const canRegister =
    form.email &&
    form.userName &&
    form.password &&
    form.rePassword &&
    !errors.email &&
    !errors.userName &&
    !errors.password &&
    !errors.rePassword;

  const handleRegister = async (e) => {
    e.preventDefault();

    // üîπ Ki·ªÉm tra h·ª£p l·ªá tr∆∞·ªõc khi g·ª≠i
    const newErrors = {
      email: validateEmail(form.email),
      userName: validateUserName(form.userName),
      password: validatePassword(form.password),
      rePassword:
        form.rePassword !== form.password ? "M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp" : "",
    };

    setErrors(newErrors);

    const hasError = Object.values(newErrors).some((e) => e);
    if (hasError) {
      toast.error("Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒëƒÉng k√Ω!");
      return;
    }

    // üîπ D·ªØ li·ªáu g·ª≠i ƒëi
    const registerUser = {
      name: form.userName,
      password: form.password,
      email: form.email,
      phone: "",
      role: 1,
      status: 1,
      type: "ƒêƒÉng k√Ω",
    };

    // üîπ Ki·ªÉm tra field tr·ªëng (s·ª≠ d·ª•ng validateFields helper)
    const valid = validateFields({
      email: form.email,
      userName: form.userName,
      password: form.password,
    });
    if (!valid) return;

    try {
      setIsLoading(true);
      const result = await sendRequest(REGISTER, "POST", registerUser);

      // üîπ M·ªôt s·ªë API tr·∫£ v·ªÅ text, n√™n ki·ªÉm tra k·∫øt qu·∫£ th·ªß c√¥ng n·∫øu c·∫ßn
      if (typeof result === "string") {
        if (result === "Email ƒë√£ t·ªìn t·∫°i") {
          toast.error("Email ƒë√£ t·ªìn t·∫°i");
          return;
        }
        if (isNaN(parseInt(result))) {
          toast.error(result);
          return;
        }

        navigate("/confirm-account", {
          state: { userId: parseInt(result) },
        });
      } else {
        // N·∫øu API tr·∫£ JSON object
        if (result?.id) {
          navigate("/confirm-account", { state: { userId: result.id } });
        } else {
          toast.success("ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng x√°c nh·∫≠n email.");
        }
      }
    } catch (err) {
      console.error("‚ùå Register error:", err);
      // sendRequest ƒë√£ t·ª± toast l·ªói, kh√¥ng c·∫ßn th√™m ·ªü ƒë√¢y
    } finally {
      setIsLoading(false);
    }
  };

  const googleLogin = () => {
    localStorage.setItem("googleLogin", "true");
    window.location.href = USER_GOOGLE_LOGIN;
  };

  return (
    <section className="register-section">
      <LoadingBackdrop open={isLoading} message="ƒêang x·ª≠ l√Ω y√™u c·∫ßu..." />
      <div className="register-container">
        <form className="register-form" onSubmit={handleRegister}>
          <h1 className="register-title">ƒêƒÉng k√Ω</h1>

          <div className="input-group">
            <input
              type="text"
              name="userName"
              placeholder="Nh·∫≠p t√™n ng∆∞·ªùi d√πng"
              value={form.userName}
              onChange={handleChange}
              className="input-field"
            />
            {errors.userName && <p className="error-text">{errors.userName}</p>}
          </div>

          <div className="input-group">
            <input
              type="email"
              name="email"
              placeholder="Nh·∫≠p email"
              value={form.email}
              onChange={handleChange}
              className="input-field"
            />
            {errors.email && <p className="error-text">{errors.email}</p>}
          </div>

          <PasswordInput
            label="M·∫≠t kh·∫©u"
            name="password"
            placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
            value={form.password}
            onChange={handleChange}
            showPassword={showPassword}
            toggleShow={togglePasswordVisibility}
            errorMessage={errors.password}
            hintText="M·∫≠t kh·∫©u ph·∫£i d√†i t·ª´ 8 ƒë·∫øn 32 k√Ω t·ª±, bao g·ªìm ch·ªØ v√† s·ªë"
          />

          <PasswordInput
            label="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
            name="rePassword"
            placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
            value={form.rePassword}
            onChange={handleChange}
            showPassword={showRePassword}
            toggleShow={toggleRePasswordVisibility}
            errorMessage={errors.rePassword}
          />

          <button
            className={`btn primary-btn ${!canRegister ? "disabled" : ""}`}
            type="submit"
            disabled={!canRegister}
          >
            ƒêƒÉng k√Ω
          </button>
          {/* <div className="buttonSave">
            <button
              className={canRegister ? "btn save" : " disabled"}
              type="submit"
              disabled={!canRegister}
              onClick={handleRegister}
            >
              ƒêƒÉng k√Ω
            </button>
          </div> */}
        </form>

        <div className="divider">
          <span>Ho·∫∑c</span>
        </div>

        <button className="btn google-btn" onClick={googleLogin}>
          Ti·∫øp t·ª•c v·ªõi Google
        </button>

        <div className="login-link">
          <p>
            B·∫°n ƒë√£ c√≥ t√†i kho·∫£n?
            <Link to="/login" className="login-text">
              ƒêƒÉng nh·∫≠p
            </Link>
          </p>
        </div>
      </div>
    </section>
  );
};

export default Register;
